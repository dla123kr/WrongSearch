using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml.Serialization;
using System.IO;

using System.Threading;
using System.Net;
using System.Net.Sockets;

using WrongSearch_Server.Class;

namespace WrongSearch_Server
{
    public partial class ServerForm : Form
    {
        // ServerForm에서 사용되는 전역변수를 관리합니다.
        #region 변수 모음

        private TcpListener serverSocket = null;
        private TcpClient clientSocket = null;

        public List<handleClient> allClient = new List<handleClient>(); // 모든 클라이언트 관리
        public List<clsPerson> member = new List<clsPerson>(); // 회원을 관리
        //public List<clsPerson> waiting = new List<clsPerson>(); // 대기인원 관리
        public WATCrypt m_crypt = new WATCrypt("lb2hlb2h"); // 암호화,복호화
        public List<Answer> answer = new List<Answer>();    //정답관리

        public int maxPlayer = 9;
        public int connectCnt = 0;
        public bool readyPlayer = false;
        public int RoomNumber = 1;      //방번호

        #endregion

        // Form의 켜짐과 꺼짐에 관련된 함수를 관리합니다.
        #region Form Load & Closing

        public ServerForm()
        {
            InitializeComponent();
        }

        // 폼이 켜지면 IP를 받아오고, XML 역직렬화를 함.
        // 클라이언트를 받아들이는 쓰레드를 작동시킴
        private void ServerForm_Load(object sender, EventArgs e)
        {
            lbIP.Text = GetIP();

            member = XMLDeserialize_M("memberDB.xml"); // XML 역직렬화
            answer = XMLDeserialize_A("Answer.xml"); 

            Thread thr = new Thread(new ThreadStart(ListenClient));
            thr.Start();
        }

        // 프로그램 종료 시, 모든 쓰레드 및 프로세스 종료
        private void ServerForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            for (int i = 0; i < member.Count; i++)
            {
                member[i].password = m_crypt.Encrypt(member[i].password);
            }
            XMLSerialize(member, "memberDB.xml");

            for (int i = 0; i < allClient.Count; i++)
            {
                try
                {
                    NetworkStream ns = allClient[i].clientSocket.GetStream();

                    string msg = "ClientOUT√";
                    byte[] buf = Encoding.UTF8.GetBytes(msg);

                    ns.Write(buf, 0, buf.Length);
                    ns.Flush();
                    this.Invoke(new WrongSearch_Server.ServerForm.LogDelegate(_Logging),
                    new object[] { msg, "Server->Client" });
                }
                catch { }
            }

            Application.ExitThread();
            Environment.Exit(0);
        }

        // IPv4의 주소를 받아옵니다.
        private string GetIP()
        {
            IPHostEntry host = Dns.GetHostEntry(Dns.GetHostName());
            string ip = null;
            for (int i = 0; i < host.AddressList.Length; i++)
            {
                if (host.AddressList[i].AddressFamily == AddressFamily.InterNetwork)
                    ip = host.AddressList[i].ToString();
            }
            return ip;
        }

        // 계속해서 클라이언트의 접속을 받아들인 후,
        // 클라이언트의 접속이 있을 경우 handleClient 클래스로 받아들인다.
        private void ListenClient()
        {
            serverSocket = new TcpListener(IPAddress.Any, 8088);
            serverSocket.Start();

            while (true)
            {
                clientSocket = serverSocket.AcceptTcpClient();

                handleClient client = new handleClient(this);
                client.startClient(clientSocket, connectCnt.ToString());
                allClient.Add(client); // 모든 클라이언트 관리에 추가

                connectCnt++;
            }
        }

        #endregion

        // XML 직렬화 & 역직렬화, 복호화 함수를 관리합니다.
        #region XML & Decrypt

        // XML 직렬화
        // list: 직렬화할 리스트, filename: 파일이름
        public void XMLSerialize(List<clsPerson> list, String filename)
        {
            XmlSerializer serializer = null;
            FileStream stream = null;
            try
            {
                serializer = new XmlSerializer(typeof(List<clsPerson>));
                stream = new FileStream(filename, FileMode.Create, FileAccess.Write);
                serializer.Serialize(stream, list);
            }
            finally
            {
                if (stream != null)
                    stream.Close();
            }
        }

        // XML 역직렬화
        // filename: 역직렬화할 xml 파일이름
        public List<clsPerson> XMLDeserialize_M(String filename)
        {
            XmlSerializer serializer = null;
            FileStream stream = null;
            List<clsPerson> list = new List<clsPerson>();
            try
            {
                serializer = new XmlSerializer(typeof(List<clsPerson>));
                stream = new FileStream(filename, FileMode.Open);
                list = (List<clsPerson>)serializer.Deserialize(stream);
            }
            catch { }
            finally
            {
                if (stream != null)
                    stream.Close();
            }

            return ListPasswordDeCrypt(list);
        }

        public List<Answer> XMLDeserialize_A(String filename)
        {
            XmlSerializer serializer = null;
            FileStream stream = null;
            List<Answer> list = new List<Answer>();
            try
            {
                serializer = new XmlSerializer(typeof(List<Answer>));
                stream = new FileStream(filename, FileMode.Open);
                list = (List<Answer>)serializer.Deserialize(stream);
            }
            catch { }
            finally
            {
                if (stream != null)
                    stream.Close();
            }

            return list;
        }

        // 받아온 리스트의 암호를 복호화함.
        // list: 복호화할 리스트
        public List<clsPerson> ListPasswordDeCrypt(List<clsPerson> list)
        {
            for (int i = 0; i < list.Count; i++)
            {
                try
                {
                    list[i].password = m_crypt.Decrypt(list[i].password);
                }
                catch { }
            }

            return list;
        }

        #endregion

        // 서버에서 클라이언트로 버퍼를 보내는 함수를 관리합니다.
        #region Send~

        // 로그 델리게이트
        public delegate void LogDelegate(string msg, string state);
        public void _Logging(string msg, string state)
        {
            this.rtbLog.Text += "\n";
            this.rtbLog.Text += state + " : ";
            this.rtbLog.Text += msg;
        }

        // 클라이언트에서 접속하면 대기실에 환영 메세지를 띄웁니다.
        public void SendHello(clsPerson user)
        {
            for (int i = 0; i < allClient.Count; i++)
            {
                try
                {
                    if (allClient[i].user.room[0] == 0)//|| allClient[i].user !=null)
                    {
                        NetworkStream ns = allClient[i].clientSocket.GetStream();

                        string msg = "hello√[ " + user.name + " 님이 접속하셨습니다. ]√";

                        for (int j = 0; j < allClient.Count; j++)
                        {
                            try
                            {
                                msg = msg + allClient[j].user.name + "√" + allClient[j].user.classNumber + "√" + allClient[j].user.gender + "√" +
                                    allClient[j].user.elo + "√" + allClient[j].user.room[0] + "√";
                            }
                            catch { }

                        }

                        byte[] buf = Encoding.UTF8.GetBytes(msg);
                        ns.Write(buf, 0, buf.Length);
                        ns.Flush();
                        this.Invoke(new LogDelegate(_Logging), new object[] { msg, "Server->Client" });
                    }
                }
                catch { }
            }
        }

        // 클라이언트에서 시작버튼을 누를때
        public void SendReady(int max, int roomNumber)
        {
            readyPlayer = (readyPlayer) ? false : true;

            if (!readyPlayer)//상대가 기다리고있을때
            {
                for (int i = 0; i < allClient.Count; i++)
                {
                    if (allClient[i].user.room[0] == roomNumber)
                    {
                        NetworkStream ns = allClient[i].clientSocket.GetStream();

                        string msg = "ready√시작√";
                        //byte[] buf = Encoding.UTF8.GetBytes(msg);
                        //ns.Write(buf, 0, buf.Length);
                        //ns.Flush();
                        SendRandom(max, roomNumber, msg);
                    }
                }
            }
            else//상대가 없을때
            {
                for (int i = 0; i < allClient.Count; i++)
                {
                    if (allClient[i].user.room[0] == roomNumber)
                    {
                        NetworkStream ns = allClient[i].clientSocket.GetStream();

                        string msg = "ready√대기√";
                        byte[] buf = Encoding.UTF8.GetBytes(msg);
                        ns.Write(buf, 0, buf.Length);
                        ns.Flush();
                        this.Invoke(new LogDelegate(_Logging), new object[] { msg, "Server->Client" });
                    }
                }
            }


        }


        // 서버로 온 채팅을 모든 클라이언트에 전송합니다.
        // msg: 로비 혹은 방으로 클라이언트로 보낼 채팅 버퍼
        public void SendChat(string msg)
        {
            string[] msgArray = msg.Split('√');

            for (int i = 0; i < allClient.Count; i++)
            {
                if (allClient[i].user.room[0].ToString() == msgArray[2])
                {
                    NetworkStream ns = allClient[i].clientSocket.GetStream();

                    byte[] buf = Encoding.UTF8.GetBytes(msg);
                    ns.Write(buf, 0, buf.Length);
                    ns.Flush();
                    this.Invoke(new LogDelegate(_Logging), new object[] { msg, "Server->Client" });

                }
            }
        }

        // 상대방에게 대전신청 버퍼를 보냅니다.
        // msg: battle√보낸이름√보낸학번√받는학번√받는이름√
        // msg: battleYes√상대방학번√학번√이름√ or battleNo√학번√
        //public void SendBattle(string msg)
        //{
        //    string[] msgArray = msg.Split('√');

        //    if (msgArray[0] == "battle")
        //    {
        //        for (int i = 0; i < allClient.Count; i++)
        //        {
        //            if (allClient[i].user.classNumber == msgArray[3])
        //            {
        //                NetworkStream ns = allClient[i].clientSocket.GetStream();

        //                byte[] buf = Encoding.UTF8.GetBytes(msg);
        //                ns.Write(buf, 0, buf.Length);
        //                ns.Flush();
        //                this.Invoke(new LogDelegate(_Logging), new object[] { msg, "Server->Client" });
        //            }
        //        }
        //    }
        //    else if (msgArray[0] == "battleYes")
        //    {
        //        for (int i = 0; i < allClient.Count; i++)
        //        {
        //            //방 들어감
        //            NetworkStream ns1 = allClient[i].clientSocket.GetStream();

        //            byte[] buf1 = Encoding.UTF8.GetBytes("room√" + RoomNumber.ToString() + "√"
        //                + msgArray[2] + "√" + msgArray[3] + "√");
        //            ns1.Write(buf1, 0, buf1.Length);
        //            ns1.Flush();

        //            if (allClient[i].user.classNumber == msgArray[2])
        //            {
        //                NetworkStream ns2 = allClient[i].clientSocket.GetStream();

        //                byte[] buf2 = Encoding.UTF8.GetBytes(msg);
        //                ns2.Write(buf2, 0, buf2.Length);
        //                ns2.Flush();
        //            }

        //            //방번호 전송
        //            if (allClient[i].user.classNumber == msgArray[2]
        //                    || allClient[i].user.classNumber == msgArray[3])
        //            {
        //                allClient[i].user.room[0] = RoomNumber;
        //                if (allClient[i].user.classNumber == msgArray[3])
        //                {
        //                    allClient[i].user.room[1] = 1;
        //                }
        //            }

        //        }
        //        RoomNumber++;
        //    }
        //    else if (msgArray[0] == "battleNo")
        //    {
        //        for (int i = 0; i < allClient.Count; i++)
        //        {
        //            if (allClient[i].user.classNumber == msgArray[1])
        //            {
        //                NetworkStream ns = allClient[i].clientSocket.GetStream();

        //                byte[] buf = Encoding.UTF8.GetBytes(msg);
        //                ns.Write(buf, 0, buf.Length);
        //                ns.Flush();
        //                this.Invoke(new LogDelegate(_Logging), new object[] { msg, "Server->Client" });
        //            }
        //        }

        //    }
        //}


        //result√방번호√승자학번2√패자학번3√승자레이팅4√패자레이팅5
        public void SendResult(string msg)
        {
            string[] msgArray = msg.Split('√');
            string opposite = msgArray[2] == "0" ? "1" : "0";   //방장이면 1로 아니면 0으로
            for (int i = 0; i < allClient.Count; i++)   //모든 클라이언트 대상으로 검색
            {
                if (allClient[i].user.classNumber == msgArray[2])
                {
                    for (int j = 0; j < member.Count; j++)
                    {
                        if (allClient[i].user.classNumber == member[j].classNumber)
                        {
                            member[j].elo = Convert.ToInt32(msgArray[4]);
                            allClient[i].user.elo = Convert.ToInt32(msgArray[4]);
                        }
                    }
                }

                if (allClient[i].user.classNumber == msgArray[3])
                {
                    for (int j = 0; j < member.Count; j++)
                    {
                        if (allClient[i].user.classNumber == member[j].classNumber)
                        {
                            member[j].elo = Convert.ToInt32(msgArray[5]);
                            allClient[i].user.elo = Convert.ToInt32(msgArray[5]);
                        }
                    }
                }
            }
   
            for (int i = 0; i < allClient.Count; i++)
            {                
                    NetworkStream ns = allClient[i].clientSocket.GetStream();

                    byte[] buf = Encoding.UTF8.GetBytes(msg);
                    ns.Write(buf, 0, buf.Length);
                    ns.Flush();
                    this.Invoke(new LogDelegate(_Logging), new object[] { msg, "Server->Client" });
            }

        }



        //클라이언트가 시작버튼을 누르면 랜덤한 숫자 다섯개를 접속되어있는 방에 접속되어있는 클라이언트에 보내줍니다.
        //msg : start√랜덤한 숫자 5개
        public void SendRandom(int max, int roomNumber, string msg)
        {
            Random rd = new Random((int)DateTime.Now.Ticks);
            int[] num = new int[5];
            List<int> list = new List<int>();
            msg = msg + "start√";

            for (int i = 1; i <= max; i++)
            {
                list.Add(i);
            }

            for (int i = 0; i < 5; i++)
            {
                int idx = rd.Next(0, list.Count-1);
                num[i] = list[idx];
                list.RemoveAt(idx);

                msg = msg + num[i] + "√";
            }
            for (int i = 0; i < allClient.Count; i++)
            {
                if (allClient[i].user.room[0] == roomNumber)
                {
                    NetworkStream ns = allClient[i].clientSocket.GetStream();
                    byte[] buf = Encoding.UTF8.GetBytes(msg);
                    ns.Write(buf, 0, buf.Length);
                    ns.Flush();
                    this.Invoke(new LogDelegate(_Logging), new object[] { msg, "Server->Client" });
                }
            }
            for (int i = 0; i < allClient.Count; i++)
            {
                if (allClient[i].user.room[0] == roomNumber)
                {
                    string msg2 = "ans√";
                    NetworkStream ns = allClient[i].clientSocket.GetStream();
                    for (int j = 0; j < 5; j++)
                    {
                        for (int k = 0; k < answer.Count; k++)
                        {
                            if (answer[k].fname == ("picture" + num[j] + "_1.PNG")
                                || answer[k].fname == ("picture" + num[j] + "_1.JPG")
                                || answer[k].fname == ("picture" + num[j] + "_1.png")
                                || answer[k].fname == ("picture" + num[j] + "_1.jpg"))
                            {
                                msg2 = msg2 + num[j].ToString() + "√";
                                msg2 = msg2 + answer[k].num.ToString() + "√";
                                msg2 = msg2 + answer[k].Spoint.X.ToString() + "√";
                                msg2 = msg2 + answer[k].Spoint.Y.ToString() + "√";
                                msg2 = msg2 + answer[k].W + "√";
                                msg2 = msg2 + answer[k].H + "√";
                            }
                        }
                    }

                    byte[] buf2 = Encoding.UTF8.GetBytes(msg2);
                    ns.Write(buf2, 0, buf2.Length);
                    ns.Flush();
                    this.Invoke(new LogDelegate(_Logging), new object[] { msg2, "Server->Client" });
                }
            }
        }
        public void SendStatement(string msg)
        {
            string[] msgArray = msg.Split('√');

            for (int i = 0; i < allClient.Count; i++)
            {
                string opposite= msgArray[2]=="0" ? "1" : "0";
                if (allClient[i].user.room[0].ToString() == msgArray[1] && allClient[i].user.room[1].ToString() == opposite)
                {
                    NetworkStream ns = allClient[i].clientSocket.GetStream();

                    byte[] buf = Encoding.UTF8.GetBytes(msg);
                    ns.Write(buf, 0, buf.Length);
                    ns.Flush();
                    this.Invoke(new LogDelegate(_Logging), new object[] { msg, "Server->Client" });
                }
            }
        }
        public void SendGameEnd(string msg, string cln)
        {
            string[] msgArray = msg.Split('√');
            string msg1 = "gameend√" + msgArray[1] + "√";
            string tmp = msgArray[1];

            for (int i = 0; i < allClient.Count; i++)   //모든 클라이언트 대상으로 검색
            {
                if (allClient[i].user.room[0].ToString() == msgArray[1]) //방번호가 맞는 클라를 찾아서
                    allClient[i].user.room[0] = 0;  //방번호를 0으로 바꿈
            }

            for (int j = 0; j < allClient.Count; j++)
            {
                msg1 = msg1 + allClient[j].user.name + "√" + allClient[j].user.classNumber + "√" + allClient[j].user.gender + "√" +
                    allClient[j].user.elo + "√" + allClient[j].user.room[0] + "√";
            }
            for (int i = 0; i < allClient.Count; i++)
            {
                if (cln == allClient[i].clNo)
                {
                    NetworkStream ns = allClient[i].clientSocket.GetStream();

                    byte[] buf = Encoding.UTF8.GetBytes(msg1);
                    ns.Write(buf, 0, buf.Length);
                    ns.Flush();
                    this.Invoke(new LogDelegate(_Logging), new object[] { msg1, "Server->Client" });
                }
            }
        }

        public void SendExit(clsPerson user)
        {
            for (int i = 0; i < allClient.Count; i++)
            {
                if (allClient[i].user.room[0] == 0)
                {
                    NetworkStream ns = allClient[i].clientSocket.GetStream();

                    string msg = "exit√[ " + user.name + " 님이 나가셨습니다. ]√";

                    for (int j = 0; j < allClient.Count; j++)
                    {

                        msg = msg + allClient[j].user.name + "√" + allClient[j].user.classNumber + "√" + allClient[j].user.gender + "√" +
                            allClient[j].user.elo + "√" + allClient[j].user.room[0] + "√";

                    }

                    byte[] buf = Encoding.UTF8.GetBytes(msg);
                    ns.Write(buf, 0, buf.Length);
                    ns.Flush();
                    this.Invoke(new LogDelegate(_Logging), new object[] { msg, "Server->Client" });
                }
            }
        }

        // msg: exitRoom√나가는 사람의 classNumber+나가는 사람 이름+방번호√
        public void SendExitRoom(string msg)
        {
            string[] msgArray = msg.Split('√');
            string[] msgArray2 = msgArray[1].Split(',');
            for (int i = 0; i < allClient.Count; i++)
            {
                if (allClient[i].user.room[0] == int.Parse(msgArray2[2]))//같은 방번호일 경우 들어온다
                {
                    if (allClient[i].user.classNumber == msgArray2[0]) //나가는 사람 처리
                    {
                        allClient[i].user.room[0] = 0;
                        allClient[i].user.room[2] = 1;//방에 있는 인원은 한명
                    }
                    else //남아있는 사람 처리
                    {
                        allClient[i].user.room[1] = 0; //방장
                        allClient[i].user.room[2] = 1;
                    }
                }
            }

            for (int i = 0; i < allClient.Count; i++)
            {
                NetworkStream ns = allClient[i].clientSocket.GetStream();
                if ((allClient[i].user.room[0] == int.Parse(msgArray2[2])) && !(allClient[i].user.classNumber == msgArray2[0]))
                {
                     string msg2 = "exitRoom√" + msgArray[1] + "√";
                     byte[] buf = Encoding.UTF8.GetBytes(msg2);

                     ns.Write(buf, 0, buf.Length);
                     ns.Flush();
                     this.Invoke(new LogDelegate(_Logging), new object[] { msg2, "Server->"+allClient[i].user.classNumber });
                }
                if ((allClient[i].user.classNumber == msgArray2[0] && allClient[i].user.name == msgArray2[1])  || allClient[i].user.room[0] == 0)
                {
                    string msg2 = "exitRoom√" + msgArray[1] + "√";

                    for (int j = 0; j < allClient.Count; j++)
                    {
                        msg2 = msg2 + allClient[j].user.name + "√" + allClient[j].user.classNumber + "√" + allClient[j].user.gender + "√" +
                            allClient[j].user.elo + "√" + allClient[j].user.room[0] + "√";
                    }
                    msg2 = msg2.Replace("\0", string.Empty);
                    byte[] buf = Encoding.UTF8.GetBytes(msg2);

                    ns.Write(buf, 0, buf.Length);
                    ns.Flush();
                    this.Invoke(new LogDelegate(_Logging), new object[] { msg2, "Server->Client" });

                    allClient[i].user.room[0] = 0;
                }
            }
        }

        #endregion 

        private void btnDebug_Click(object sender, EventArgs e)
        {

        }
    }

    public class handleClient
    {
        // handleClient에서 사용되는 전역변수를 관리합니다.
        #region 변수 모음

        ServerForm serverForm = null;

        public TcpClient clientSocket;
        public Thread recvThr = null;
        public string clNo;
        string stdNum;

        public clsPerson user = null;

        #endregion

        // handleClient의 생성자 함수를 관리하고 쓰레드를 돌립니다.
        #region Class Constructor

        // ServerForm과 handleClient를 연결
        public handleClient(ServerForm sf)
        {
            serverForm = sf;
        }

        // 클라이언트에 번호를 매기고, 버퍼를 받을 수 있게한다.
        public void startClient(TcpClient inClientSocket, string clineNo)
        {
            this.clientSocket = inClientSocket;
            this.clNo = clineNo;
            recvThr = new Thread(RecvBuffer);
            recvThr.Start();
        }

        #endregion

        // 반복문을 사용하여 클라이언트에서 서버로 버퍼를 받아들입니다.
        #region RecvBuffer

        // 서버로 오는 모든 버퍼를 받아들인 후,
        // 무슨 버퍼인지 판별 후 적절한 명령을 내림.
        private void RecvBuffer()
        {
            while (true)
            {
                byte[] buf = new byte[1024];
                string msg = null;

                try
                {
                    NetworkStream ns = clientSocket.GetStream();

                    ns.Read(buf, 0, buf.Length);
                    msg = Encoding.UTF8.GetString(buf);                    

                    // 여기부터 받아오는 버퍼의 종류마다 다르게 처리.
                    RecvConnect(msg);
                    RecvRegist(msg);
                    RecvLogin(msg);
                    RecvChat(msg);
                    //RecvBattle(msg);
                    RecvRoom(msg);
                    JoinRoom(msg);
                    RecvStart(msg);
                    RecvStatement(msg);
                    RecvGameEnd(msg);
                    RecvExit(msg);
                    RecvExitRoom(msg);
                    RecvResult(msg);
                }
                catch (Exception e)
                { //MessageBox.Show(e.Message);
                }
            }
        }

        // 클라이언트로부터 받아들여진 버퍼를 각 분류마다 다르게 처리합니다.
        #region Recv~

        private void RecvConnect(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "connect")
            {
                NetworkStream ns = clientSocket.GetStream();
                bool connectOK = false;

                if (serverForm.allClient.Count <= serverForm.maxPlayer)
                {
                    connectOK = true;
                }

                // buf: true or false√
                byte[] buf = Encoding.UTF8.GetBytes(connectOK.ToString() + "√");
                ns.Write(buf, 0, buf.Length);
                ns.Flush();
                try
                {
                    serverForm.Invoke(new LogDelegate(_Logging), new object[] { msg, user.classNumber + "->Server" });
                }
                catch
                {
                    serverForm.Invoke(new LogDelegate(_Logging), new object[] { msg, "Client->Server" });
                }
            }
        }

        // 회원가입버퍼를 처리합니다.
        // msg: regist√학번√비밀번호√이름√성별√연락처
        private void RecvRegist(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "regist")
            {
                NetworkStream ns = clientSocket.GetStream();
                string response = "regist√pass√";

                for (int i = 0; i < serverForm.member.Count; i++)
                {
                    if (serverForm.member[i].classNumber == msgArray[1])
                    {
                        response = "regist√fail√"; // 학번이 중복일 경우
                        break;
                    }
                }

                byte[] buf = Encoding.UTF8.GetBytes(response);
                ns.Write(buf, 0, buf.Length);
                ns.Flush();
                try
                {
                    serverForm.Invoke(new LogDelegate(_Logging), new object[] { msg, user.classNumber + "->Server" });
                }
                catch
                {
                    serverForm.Invoke(new LogDelegate(_Logging), new object[] { msg, "Client->Server" });
                }

                if (response == "regist√pass√")
                {
                    clsPerson person = new clsPerson(msgArray[1], msgArray[2], msgArray[3], msgArray[4], msgArray[5]);
                    serverForm.member.Add(person);
                }
            }
        }

        // 로그인 버퍼를 처리합니다.               
        // msg: login√학번√비밀번호√성별√승
        private void RecvLogin(string msg)
        {
            string[] msgArray = msg.Split('√');
            int clientIdx = int.Parse(clNo);

            
            if (msgArray[0] == "login")
            {
                NetworkStream ns = clientSocket.GetStream();
                string response = "login√fail√";

                for (int i = 0; i < serverForm.member.Count; i++)
                {
                    // 새로 가입한 회원이 있을지도 모르므로 XML파일을 한번 더 불러옴
                    //serverForm.member = serverForm.XMLDeserialize("memberDB.xml"); // XML 역직렬화

                    if (serverForm.member[i].classNumber == msgArray[1] &&
                        serverForm.member[i].password == msgArray[2])
                    {
                        if (duplicating(msgArray))  //중복이면
                            response = "login√duplicate√" + serverForm.member[i].classNumber + "√";
                        else
                        {

                            response = "login√pass√" + serverForm.member[i].classNumber + "√" +
                                serverForm.member[i].name + "√" + serverForm.member[i].gender + "√" + serverForm.member[i].elo + "√"; // 로그인에 성공한 경우
                            // login√pass√학번√이름√성별√승
                            user = new clsPerson(serverForm.member[i].classNumber, serverForm.member[i].password, serverForm.member[i].name,
                                serverForm.member[i].gender, serverForm.member[i].phone, serverForm.member[i].elo);
                            //  serverForm.allClient[clientIdx].user = user;
                            stdNum = serverForm.member[i].classNumber;  //중복로그인 체크를 위한 학번저장; 
                            break;
                        }
                    }
                }

                byte[] buf1 = Encoding.UTF8.GetBytes(response);
                ns.Write(buf1, 0, buf1.Length);
                ns.Flush();
                try
                {
                    serverForm.Invoke(new LogDelegate(_Logging), new object[] { msg, user.classNumber + "->Server" });
                }
                catch
                {
                    serverForm.Invoke(new LogDelegate(_Logging), new object[] { msg, "Client->Server" });
                }

                // 채팅을 킬지말지 버퍼를 받음
                // buf: chatOn√ or fail√
                byte[] buf2 = new byte[1024];
                ns.Read(buf2, 0, buf2.Length);
                string recv = Encoding.UTF8.GetString(buf2);
                string[] chat = recv.Split('√');

                if (chat[0] == "chatOn")
                {
                    user.room[0] = 0;
                    serverForm.SendHello(/*serverForm.allClient[clientIdx].*/user);
                }
            }
        }

        // 채팅버퍼를 처리합니다.
        // msg: chat√채팅내용√
        private void RecvChat(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "chat")
            {
                serverForm.SendChat(msg);
            }
        }

        // 대전신청을 처리합니다.
        // msg: battle√이름√학번√상대방학번√
        // msg: battleYes√학번√ or battleNo√학번√
        //private void RecvBattle(string msg)
        //{
        //    string[] msgArray = msg.Split('√');

        //    if (msgArray[0] == "battle" || msgArray[0] == "battleYes" || msgArray[0] == "battleNo")
        //    {
        //        serverForm.SendBattle(msg);
        //    }
        //}

        // 방을 생성합니다.
        // msg: roomCreate√학번√
        private void RecvRoom(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "roomCreate")
            {
                string host_num = null;

                for (int i = 0; i < serverForm.allClient.Count; i++)
                {
                    if (msgArray[1] == serverForm.allClient[i].user.classNumber)
                    {
                        serverForm.allClient[i].user.room[0] = serverForm.RoomNumber; // 방번호
                        serverForm.allClient[i].user.room[1] = 0; // 방장입니다.
                        serverForm.allClient[i].user.room[3] = 1; // 이 방엔 1명있음.

                        NetworkStream ns = serverForm.allClient[i].clientSocket.GetStream();
                        int room_num = serverForm.RoomNumber;
                        string msg2 = "roomCreated√" + room_num.ToString() + "√" +
                            serverForm.allClient[i].user.classNumber + "√null√";
                        byte[] buf = Encoding.UTF8.GetBytes(msg2);
                        ns.Write(buf, 0, buf.Length);
                        ns.Flush();

                        host_num = serverForm.allClient[i].user.classNumber;
                    }
                }
                for (int j = 0; j < serverForm.allClient.Count; j++)
                {
                    if (msgArray[1] != serverForm.allClient[j].user.classNumber)
                    {
                        NetworkStream ns = serverForm.allClient[j].clientSocket.GetStream();
                        int room_num = serverForm.RoomNumber;
                        string msg2 = "roomCreated√" + room_num.ToString() + "√null√" + host_num + "√";
                        byte[] buf = Encoding.UTF8.GetBytes(msg2);
                        ns.Write(buf, 0, buf.Length);
                        ns.Flush();
                    }
                }
                serverForm.RoomNumber++;
            }
        }

        //msg: JoinRoom√상대학번√상대이름√
        private void JoinRoom(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "JoinRoom")
            {
                string hostRoomNum = null; //방번호
                for (int i = 0; i < serverForm.allClient.Count; i++)
                {
                    if (msgArray[1] == serverForm.allClient[i].user.classNumber)
                    {
                        if (serverForm.allClient[i].user.room[3] == 1)      //한명일때
                        {
                            hostRoomNum = serverForm.allClient[i].user.room[0].ToString();
                            //방장에게보냄
                            NetworkStream ns = serverForm.allClient[i].clientSocket.GetStream();
                            string msg2 = "JoinRoom√" + hostRoomNum +"√"
                                + serverForm.allClient[i].user.classNumber +"√" + serverForm.allClient[i].user.name + "√"
                                + this.user.classNumber + "√" + this.user.name + "√" + this.user.elo + "√" + serverForm.allClient[i].user.elo + "√";
                            byte[] buf = Encoding.UTF8.GetBytes(msg2);
                            ns.Write(buf, 0, buf.Length);
                            ns.Flush();

                            this.user.room[0] = serverForm.allClient[i].user.room[0];       //들어간사람방번호바꿈
                            this.user.room[3] = 2;
                            serverForm.allClient[i].user.room[3] = 2;               //방 채움
                            
                            //들어간사람에게보냄
                            NetworkStream ns2 = this.clientSocket.GetStream();
                            byte[] buf2 = Encoding.UTF8.GetBytes(msg2);
                            ns2.Write(buf2, 0, buf2.Length);
                            ns2.Flush();


                        }
                        else if (serverForm.allClient[i].user.room[3] == 2)     //다찬방일때
                        {
                            NetworkStream ns = this.clientSocket.GetStream();
                            string msg2 = "JoinRoomFalse√";
                            byte[] buf = Encoding.UTF8.GetBytes(msg2);
                            ns.Write(buf, 0, buf.Length);
                            ns.Flush();
                            return;
                        }
                    }
                }

                for (int i = 0; i < serverForm.allClient.Count; i++)
                {
                    if (msgArray[1] != serverForm.allClient[i].user.classNumber
                        && this.user.classNumber != serverForm.allClient[i].user.classNumber)
                    {
                        NetworkStream ns = serverForm.allClient[i].clientSocket.GetStream();
                        string msg2 = "JoinRoom√" + hostRoomNum + "√" + msgArray[1] + "√" + msgArray[2] + "√"
                            + this.user.classNumber + "√" + this.user.name + "√";
                        byte[] buf = Encoding.UTF8.GetBytes(msg2);
                        ns.Write(buf, 0, buf.Length);
                        ns.Flush();
                    }
                }
            }

        }

        private void RecvResult(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "result")
            {
                serverForm.SendResult(msg);
            }


        }


        //start버튼을 클라이언트에서 누르면 랜덤함수 실행
        // msg : start√num[0]√num[1]...√
        private void RecvStart(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "start")
            {
                
                int max = Convert.ToInt32(msgArray[1]);
                int room = Convert.ToInt32(msgArray[2]);
                //랜덤함수 msgarray[1]은 그림최대갯수 , room은방번호
                serverForm.SendReady(max,room);

            }
        }
        private void RecvStatement(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "statement")
            {
                serverForm.SendStatement(msg);
            }
        }
        private void RecvGameEnd(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "gameend")
            {
                serverForm.SendGameEnd(msg, this.clNo);
            }
        }

        // 클라이언트 종료를 처리합니다.
        // 클라이언트 종료 시, 쓰레드, 소켓이 종료되며 serverForm의 allClient에서 제외됩니다.
        // msg: exit√
        private void RecvExit(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "exit")
            {
                user.room[0] = -1;
                this.clientSocket.Close();

                for (int i = 0; i < serverForm.allClient.Count; i++)
                {

                    if (this.clNo == serverForm.allClient[i].clNo)
                    {
                        clsPerson leave = serverForm.allClient[i].user;
                        serverForm.allClient.RemoveAt(i);
                        serverForm.SendExit(leave);
                        break;
                    }
                }

                recvThr.Abort();
            }
        }

        // 방에 나갈때의 버퍼를 처리합니다.
        // msg: exitRoom√나가는 사람 학번, 나가는 사람 이름+방번호√
        private void RecvExitRoom(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "exitRoom")
            {
                serverForm.SendExitRoom(msg);
            }
        }

        #endregion

        #endregion

        // 기타함수를 관리합니다.
        #region Etc

        //중복 로그인 여부
        public bool duplicating(string[] _arr)
        {
            for (int i = 0; i < serverForm.allClient.Count; i++)
            {
                if (_arr[1] == serverForm.allClient[i].stdNum)
                    return true;
            }
            return false;
        }

        public delegate void LogDelegate(string msg, string state);
        public void _Logging(string msg, string state)
        {
            serverForm.rtbLog.Text += "\n";
            serverForm.rtbLog.Text += state + " : ";
            serverForm.rtbLog.Text += msg;
        }

        #endregion
    }
}
