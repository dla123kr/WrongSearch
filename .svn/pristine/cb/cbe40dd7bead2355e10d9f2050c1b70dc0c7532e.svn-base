using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml.Serialization;
using System.IO;

using System.Threading;
using System.Net;
using System.Net.Sockets;

using WrongSearch_Server.Class;

namespace WrongSearch_Server
{
    public partial class ServerForm : Form
    {
        private TcpListener serverSocket = null;
        private TcpClient clientSocket = null;

        public List<handleClient> allClient = new List<handleClient>(); // 모든 클라이언트 관리
        public List<clsPerson> member = new List<clsPerson>(); // 회원을 관리
        public WATCrypt m_crypt = new WATCrypt("lb2hlb2h"); // 암호화,복호화

        public int connectCnt = 0;

        public ServerForm()
        {
            InitializeComponent();
        }

        // 폼이 켜지면 IP를 받아오고, XML 역직렬화를 함.
        // 클라이언트를 받아들이는 쓰레드를 작동시킴
        private void ServerForm_Load(object sender, EventArgs e)
        {
            lbIP.Text = GetIP();

            member = XMLDeserialize("memberDB.xml"); // XML 역직렬화

            Thread thr = new Thread(new ThreadStart(ListenClient));
            thr.Start();
        }

        // XML 직렬화
        // list: 직렬화할 리스트, filename: 파일이름
        public void XMLSerialize(List<clsPerson> list, String filename)
        {
            XmlSerializer serializer = null;
            FileStream stream = null;
            try
            {
                serializer = new XmlSerializer(typeof(List<clsPerson>));
                stream = new FileStream(filename, FileMode.Create, FileAccess.Write);
                serializer.Serialize(stream, list);
            }
            finally
            {
                if (stream != null)
                    stream.Close();
            }
        }

        // XML 역직렬화
        // filename: 역직렬화할 xml 파일이름
        public List<clsPerson> XMLDeserialize(String filename)
        {
            XmlSerializer serializer = null;
            FileStream stream = null;
            List<clsPerson> list = new List<clsPerson>();
            try
            {
                serializer = new XmlSerializer(typeof(List<clsPerson>));
                stream = new FileStream(filename, FileMode.Open);
                list = (List<clsPerson>)serializer.Deserialize(stream);
            }
            catch { }
            finally
            {
                if (stream != null)
                    stream.Close();
            }

            return ListPasswordDeCrypt(list);
        }

        // 받아온 리스트의 암호를 복호화함.
        // list: 복호화할 리스트
        public List<clsPerson> ListPasswordDeCrypt(List<clsPerson> list)
        {
            for (int i = 0; i < list.Count; i++)
            {
                try
                {
                    list[i].password = m_crypt.Decrypt(list[i].password);
                }
                catch { }
            }

            return list;
        }

        // IPv4의 주소를 받아옵니다.
        private string GetIP()
        {
            IPHostEntry host = Dns.GetHostEntry(Dns.GetHostName());
            string ip = null;
            for (int i = 0; i < host.AddressList.Length; i++)
            {
                if (host.AddressList[i].AddressFamily == AddressFamily.InterNetwork)
                    ip = host.AddressList[i].ToString();
            }
            return ip;
        }

        // 계속해서 클라이언트의 접속을 받아들인 후,
        // 클라이언트의 접속이 있을 경우 handleClient 클래스로 받아들인다.
        private void ListenClient()
        {
            serverSocket = new TcpListener(IPAddress.Any, 8088);
            serverSocket.Start();

            while (true)
            {
                clientSocket = serverSocket.AcceptTcpClient();
                connectCnt++;

                handleClient client = new handleClient(this);
                client.startClient(clientSocket, connectCnt.ToString());
                allClient.Add(client); // 모든 클라이언트 관리에 추가
            }
        }

        // 프로그램 종료 시, 모든 쓰레드 및 프로세스 종료
        private void ServerForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            for (int i = 0; i < member.Count; i++)
            {
                member[i].password = m_crypt.Encrypt(member[i].password);
            }
            XMLSerialize(member, "memberDB.xml");

            Application.ExitThread();
            Environment.Exit(0);
        }

        // 서버로 온 채팅을 모든 클라이언트에 전송합니다.
        // msg: 모든 클라이언트로 보낼 채팅 버퍼
        public void SendChat(string msg)
        {
            for (int i = 0; i < allClient.Count; i++)
            {
                if (allClient[i].chatOn)
                {
                    NetworkStream ns = allClient[i].clientSocket.GetStream();

                    byte[] buf = Encoding.UTF8.GetBytes(msg);
                    ns.Write(buf, 0, buf.Length);
                    ns.Flush();
                }
            }
        }
    }

    public class handleClient
    {
        ServerForm serverForm = null;

        public TcpClient clientSocket;
        string clNo;
        public bool chatOn = false;

        // ServerForm과 handleClient를 연결
        public handleClient(ServerForm sf)
        {
            serverForm = sf;
        }

        // 클라이언트에 번호를 매기고, 버퍼를 받을 수 있게한다.
        public void startClient(TcpClient inClientSocket, string clineNo)
        {
            this.clientSocket = inClientSocket;
            this.clNo = clineNo;
            Thread recvThr = new Thread(RecvBuffer);
            recvThr.Start();
        }
        
        // 서버로 오는 모든 버퍼를 받아들인 후,
        // 무슨 버퍼인지 판별 후 적절한 명령을 내림.
        private void RecvBuffer()
        {
            while (true)
            {
                byte[] buf = new byte[1024];
                string msg = null;

                try
                {
                    NetworkStream ns = clientSocket.GetStream();

                    ns.Read(buf, 0, buf.Length);
                    msg = Encoding.UTF8.GetString(buf);

                    // 여기부터 받아오는 버퍼의 종류마다 다르게 처리.
                    RecvRegist(msg);
                    RecvLogin(msg);
                    RecvChat(msg);
                    RecvExit(msg);
                }
                catch { }
            }
        }

        // 회원가입버퍼를 처리합니다.
        // msg: regist√학번√비밀번호√이름√성별√연락처
        private void RecvRegist(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "regist")
            {
                NetworkStream ns = clientSocket.GetStream();
                string response = "regist√pass√";

                for (int i = 0; i < serverForm.member.Count; i++)
                {
                    if (serverForm.member[i].classNumber == msgArray[1])
                    {
                        response = "regist√fail√"; // 학번이 중복일 경우
                        break;
                    }
                }

                byte[] buf = Encoding.UTF8.GetBytes(response);
                ns.Write(buf, 0, buf.Length);
                ns.Flush();

                if (response == "regist√pass√")
                {
                    clsPerson person = new clsPerson(msgArray[1], msgArray[2], msgArray[3], msgArray[4], msgArray[5]);
                    serverForm.member.Add(person);
                }
            }
        }

        // 로그인 버퍼를 처리합니다.
        // msg: login√학번√비밀번호
        private void RecvLogin(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "login")
            {
                NetworkStream ns = clientSocket.GetStream();
                string response = "login√fail√";
                for (int i = 0; i < serverForm.member.Count; i++)
                {
                    // 새로 가입한 회원이 있을지도 모르므로 XML파일을 한번 더 불러옴
                    //serverForm.member = serverForm.XMLDeserialize("memberDB.xml"); // XML 역직렬화

                    if (serverForm.member[i].classNumber == msgArray[1] &&
                        serverForm.member[i].password == msgArray[2])
                    {
                        response = "login√pass√" + serverForm.member[i].classNumber + "√"+
                            serverForm.member[i].name + "√"; // 로그인에 성공한 경우
                        // login√pass√학번√이름√
                        break;
                    }
                }

                byte[] buf = Encoding.UTF8.GetBytes(response);
                ns.Write(buf, 0, buf.Length);
                ns.Flush();

                // 채팅을 킬지말지 버퍼를 받음
                // buf: chatOn√ or fail√
                ns.Read(buf, 0, buf.Length);
                string recv = Encoding.UTF8.GetString(buf);
                string[] chat = recv.Split('√');

                if (chat[0] == "chatOn")
                {
                    chatOn = true;
                }
            }
        }

        // 채팅버퍼를 처리합니다.
        // msg: chat√채팅내용√
        private void RecvChat(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "chat")
            {
                serverForm.SendChat(msg);
            }
        }

        private void RecvExit(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "exit")
            {
                this.chatOn = false;
            }
        }
        
    }
}
