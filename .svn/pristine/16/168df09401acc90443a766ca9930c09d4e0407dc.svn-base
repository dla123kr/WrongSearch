using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using System.Threading;
using System.Net;
using System.Net.Sockets;

using WrongSearch_Client.UC;
using WrongSearch_Server.Class;

namespace WrongSearch_Client
{
    public partial class ClientForm : Form
    {
        public TcpClient clientSocket = new TcpClient();

        public clsPerson person = new clsPerson(); // 로그인한 사람의 정보를 보관할 clsPerson
        public Thread thr = null;

        public RegistForm registForm = null;
        public LoginUC loginUC = null; // LoginUC와 연결
        public GameUC gameUC = null; // GameUC와 연결

        public ClientForm()
        {
            InitializeComponent();
        }

        // 프로그램 종료시 모든 쓰레드 종료
        private void ClientForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            string msg = "exit√";
            byte[] buf = Encoding.UTF8.GetBytes(msg);

            try
            {
                NetworkStream ns = clientSocket.GetStream();
                ns.Write(buf, 0, buf.Length);
                ns.Flush();
            }
            catch { }

            Application.ExitThread();
            Environment.Exit(0);
        }

        // 폼 로드시, loginUC를 패널에 넣은 후,
        // 클라이언트도 버퍼를 받아들이는 쓰레드를 실행한다.
        private void ClientForm_Load(object sender, EventArgs e)
        {
            loginUC = new LoginUC(this);
            pnMain.Controls.Add(loginUC);

            thr = new Thread(RecvBuffer);
            thr.Start();
        }

        // 로그인 성공 시,
        // 게임모드로 변환하기 위한 창 크기 변환
        delegate void GameStartDelegate();
        private void GameStart()
        {
            this.Text = "틀린그림찾기";
            this.Size = new Size(1000, 700);
            pnMain.Size = new Size(990, 669);
            this.Location = new Point(150, 30);

            pnMain.Controls.Clear();
            gameUC = new GameUC(this);
            pnMain.Controls.Add(gameUC);
        }

        // 모든 버퍼를 받아들여, 처리합니다.
        private void RecvBuffer()
        {
            while (true)
            {
                byte[] buf = new byte[1024];
                string msg = null;

                try
                {
                    NetworkStream ns = clientSocket.GetStream();

                    ns.Read(buf, 0, buf.Length);
                    msg = Encoding.UTF8.GetString(buf);

                    // 여기부터 받아오는 버퍼의 종류마다 다르게 처리.
                    RecvRegist(msg);
                    RecvLogin(msg);
                    RecvChat(msg);
                }
                catch { }
            }
        }

        private void RecvRegist(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "regist")
            {
                registForm.SendRegist2(msgArray[1]);
            }
        }

        // 로그인 성공여부
        // msg: login√pass√학번√이름√ or login√fail√
        private void RecvLogin(string msg)
        {
            string[] msgArray = msg.Split('√');
            
            if (msgArray[0] == "login")
            {
                NetworkStream ns = clientSocket.GetStream();
                byte[] buf = null;
                string send = null;
                
                if (msgArray[1] == "fail")
                {
                    MessageBox.Show("입력한 정보가 올바르지 않습니다.", "알림", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    // 로그인 실패 시, 실패 버퍼를 보냄.
                    send = "fail√";
                    buf = Encoding.UTF8.GetBytes(send);
                    ns.Write(buf, 0, buf.Length);
                    ns.Flush();

                    return;
                }

                MessageBox.Show(msgArray[3] + "님\n환영합니다.", "알림", MessageBoxButtons.OK, MessageBoxIcon.Information);

                person.classNumber = msgArray[2];
                person.name = msgArray[3];

                // 채팅켜라
                send = "chatOn√";
                buf = Encoding.UTF8.GetBytes(send);
                ns.Write(buf, 0, buf.Length);
                ns.Flush();

                this.Invoke(new GameStartDelegate(GameStart));
            }
        }

        // 서버로 부터 전해진 채팅버퍼를 처리합니다.
        // msg: chat√채팅내용
        delegate void ChatDelegate(string msg);
        private void _RecvChat(string msg)
        {
            gameUC.rtbChatting.AppendText("\n" + msg);
            gameUC.rtbChatting.ScrollToCaret();
        }
        private void RecvChat(string msg)
        {
            string[] msgArray = msg.Split('√');

            if (msgArray[0] == "chat")
            {
                this.Invoke(new ChatDelegate(_RecvChat), new object[] { msgArray[1] });
            }
        }
    }
}
